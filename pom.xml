<?xml version="1.0" encoding="UTF-8"?>
<!-- The MIT License (MIT)

     Copyright © 2016 Emily Mabrey

     Permission is hereby granted, free of charge, to any person obtaining a
     copy of this software and associated documentation files (the "Software"),
     to deal in the Software without restriction, including without limitation
     the rights to use, copy, modify, merge, publish, distribute, sublicense,
     and/or sell copies of the Software, and to permit persons to whom the
     Software is furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     DEALINGS IN THE SOFTWARE.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>org.github.emabrey</groupId>
    <artifactId>emabrey-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>emabrey Parent POM</name>
    <description>A Maven POM developed for use by Emily Mabrey as the default parent POM for her projects.</description>
    <url>https://bintray.com/emabrey/opensource_maven/emabrey-parent</url>
    <inceptionYear>2016</inceptionYear>

    <developers>
        <developer>
            <id>emabrey</id>
            <name>Emily Mabrey</name>
            <email>emilymabrey93@gmail.com</email>
            <timezone>America/Kentucky/Louisville</timezone>
        </developer>
    </developers>

    <repositories>
        <repository>
            <id>central</id>
            <name>JCenter Repository</name>
            <url>https://jcenter.bintray.com</url>
            <layout>default</layout>
            <snapshots>
                <updatePolicy>never</updatePolicy>
                <enabled>false</enabled>
            </snapshots>
            <releases>
                <updatePolicy>never</updatePolicy>
                <enabled>true</enabled>
            </releases>
        </repository>
    </repositories>

    <properties>
        <project.build.notificationEmail>emilymabrey93@gmail.com</project.build.notificationEmail>
        <project.reports.directory>${project.build.directory}</project.reports.directory>
        <project.reports.copyrightFooter><![CDATA[© 2016 <a href="https://github.com/emabrey">Emily Mabrey</a>]]></project.reports.copyrightFooter>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <lineLength>120</lineLength>
        <indentSize>4</indentSize>

        <versions.maven.minimum>3.3.1</versions.maven.minimum>
        <versions.maven.ideal>3.3.9</versions.maven.ideal>
        <versions.buildJDK.minimum>1.8</versions.buildJDK.minimum>
        <versions.proguard.required>5.3.1</versions.proguard.required>

        <netbeans.hint.licensePath>${project.basedir}/src/main/netbeans/licenseTemplate.txt</netbeans.hint.licensePath>

        <proguard.attributes.standard>SourceFile,InnerClasses,EnclosingMethod,Deprecated,Signature,MethodParameters,Exceptions,LineNumberTable,*Annotation*</proguard.attributes.standard>
        <proguard.attributes.library>InnerClasses,EnclosingMethod,Deprecated,Signature,MethodParameters,Exceptions,RuntimeVisible*Annotations,AnnotationDefault</proguard.attributes.library>
        <proguard.attributes.debug>SourceFile,SourceDir,Synthetic,Signature,MethodParameters,Exceptions,LineNumberTable,LocalVariableTable,RuntimeVisible*Annotations,RuntimeInvisible*Annotations,AnnotationDefault</proguard.attributes.debug>
        <proguard.attributes.reflection>InnerClasses,EnclosingMethod,Deprecated,Synthetic,Signature,MethodParameters,Exceptions,RuntimeVisible*Annotations</proguard.attributes.reflection>
    </properties>

    <prerequisites>
        <maven>${versions.maven.minimum}</maven>
    </prerequisites>

    <profiles>
        <!-- This profile configures the build resources from the ./src directory to be available to both this project
             and all inheriting projects. Any inheriting POM will declare the needed plugin dependencies but the profile
             excludes this POM from having a circular dependency on itself. The plugin dependency is created as a
             secondary JAR typed artifact with a classifier of "build-resources". Note that this secondary artifact
             does not interfere with using the main emabrey-parent POM artifact in any way.
        -->
        <profile>
            <id>add-external-build-resources-artifact</id>
            <activation>
                <file>
                    <missing>src\main\resources\org\github\emabrey\emabrey_parent\build_resources</missing>
                </file>
            </activation>

            <build>
                <pluginManagement>
                    <plugins>

                        <!-- Make the license header template files EPL.txt and MIT.txt available to this POM and all
                             inheriting POMs.
                        -->
                        <plugin>
                            <groupId>com.mycila</groupId>
                            <artifactId>license-maven-plugin</artifactId>
                            <dependencies>
                                <dependency>
                                    <groupId>org.github.emabrey</groupId>
                                    <artifactId>emabrey-parent</artifactId>
                                    <version>${project.version}</version>
                                    <classifier>build-resources</classifier>
                                    <type>jar</type>
                                </dependency>
                            </dependencies>
                        </plugin>

                        <!-- Make the Javadoc stylesheet file javadoc.css available to this POM and all inheriting POMs.
                        -->
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-javadoc-plugin</artifactId>
                            <dependencies>
                                <dependency>
                                    <groupId>org.github.emabrey</groupId>
                                    <artifactId>emabrey-parent</artifactId>
                                    <version>${project.version}</version>
                                    <classifier>build-resources</classifier>
                                    <type>jar</type>
                                </dependency>
                            </dependencies>
                        </plugin>

                    </plugins>
                </pluginManagement>
            </build>
        </profile>
        
        <!-- This profile adds the elements of the build which are only relevant during a secure Travis-CI build when
             the POM is executed from within a Travis-CI build container/environment. This profiles modifications are
             inherited by child POMs as well, so any inheriting POM will automatically support Travis-CI specific
             plugins for all secure Travis-CI builds as well.
        -->
        <profile>
            <id>add-travisCI-secure-plugins</id>
            <activation>
                <property>
                    <name>env.TRAVIS_SECURE_ENV_VARS</name>
                    <value>true</value>
                </property>
            </activation>
            
            <build>
                <pluginManagement>
                    <plugins>
                        
                        <!-- Configures the Maven build so that the deploy goal deploys the build artifacts to the Open Source
                             JFrog provided Artifactory instance at "https://oss.jfrog.com". The plugin validates the settings
                             and sets up the deployment during the validate lifecycle phase. Despite lacking an explicit goal
                             named "deploy", the maven lifecycle phase "deploy" will automatically trigger this plugin. There is
                             no need to worry about releases vs SNAPSHOTS, as the plugin automatically differentiates between
                             the differing versions and deploys the artifacts to the appropriate Artifactory repo.

                             The configuration assumes that the current build is a Travis-CI build environment. By utilizing
                             Travis-CI provided environmental variables and other data available during the CI build the build
                             artifact is tagged with metadata such as a build time/date stamp and the identifier of which
                             Travis-CI job produced published the build artifacts.

                             Note that the CI Build environment is required to provide at a minimum one environmental variable
                             definition for a variable named "RELEASE_BINTRAY_API_KEY". This variable should contain the API
                             OAuth Key of a Bintray user. By default the Bintray user is "emabrey". Note that of course the API
                             key is sensitive data, and that the environmental variable should be encrypted or secured in some
                             manner. Becuase this plugin requires access to secure data via environmental variables, the default
                             Artifactory configuration's collection and publication of build environment variables is disabled.
                        -->
                        <plugin>
                            <groupId>org.jfrog.buildinfo</groupId>
                            <artifactId>artifactory-maven-plugin</artifactId>
                            <version>2.6.1</version>
                            <configuration>
                                <deployProperties>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <gitRepo>{{TRAVIS_REPO_SLUG}}</gitRepo>
                                    <gitBranch>{{TRAVIS_BRANCH}}</gitBranch>
                                    <ciBuildJob>{{TRAVIS_JOB_NUMBER}}</ciBuildJob>
                                    <ciBuildTrigger>{{TRAVIS_EVENT_TYPE}}</ciBuildTrigger>
                                    <buildJDKVendor>{{JDK_TYPE}}</buildJDKVendor>
                                </deployProperties>
                                <buildInfo>
                                    <buildName>${project.artifactId}</buildName>
                                    <agentName>Travis-CI</agentName>
                                    <vcsRevision>{{TRAVIS_COMMIT}}</vcsRevision>
                                </buildInfo>
                                <artifactory>
                                    <includeEnvVars>false</includeEnvVars>
                                </artifactory>
                                <publisher>
                                    <aggregateArtifacts>true</aggregateArtifacts>
                                    <contextUrl>{{ARTIFACTORY_CONTEXT_URL|"https://oss.jfrog.org"}}</contextUrl>
                                    <username>{{RELEASE_BINTRAY_API_USER|"emabrey"}}</username>
                                    <password>{{RELEASE_BINTRAY_API_KEY}}</password>
                                    <repoKey>oss-release-local</repoKey>
                                    <snapshotRepoKey>oss-snapshot-local</snapshotRepoKey>
                                    <publishAggregatedArtifacts>true</publishAggregatedArtifacts>
                                    <publishArtifacts>true</publishArtifacts>
                                    <publishBuildInfo>true</publishBuildInfo>
                                    <recordAllDependencies>false</recordAllDependencies>
                                </publisher>
                                <licenses>
                                    <autoDiscover>true</autoDiscover>
                                    <includePublishedArtifacts>true</includePublishedArtifacts>
                                    <runChecks>true</runChecks>
                                    <violationRecipients>{{RELEASE_BINTRAY_API_EMAIL|"${project.build.notificationEmail}"}}</violationRecipients>
                                </licenses>
                            </configuration>
                        </plugin>
                        
                    </plugins>
                </pluginManagement>
                
                <plugins>
                    
                    <!-- Run the inherited Arifactory publication setup.
                    -->
                    <plugin>
                        <groupId>org.jfrog.buildinfo</groupId>
                        <artifactId>artifactory-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>artifactory-deploy-setup</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>publish</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    
                    <!-- Run the default GPG execution but using an emabrey-parent project specific key instead of the default
                         generic key. The project specific key is signed by the default key, so it should be as trustworthy as
                         had it been signed with the default key.
                    -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <configuration>
                            <keyname>769A6558E683E955</keyname>
                        </configuration>
                    </plugin>
                    
                </plugins>
            </build>
        </profile>
        
        <!-- This profile adds the elements of the build which are only relevant during a Travis-CI build whenever the
             POM is executed from within any Travis-CI build container/environment. This profiles modifications are
             inherited by child POMs as well, so any inheriting POM will automatically support Travis-CI specific
             plugins for all Travis-CI builds as well.
        -->
        <profile>            
            <id>add-travisCI-nonsecure-plugins</id>
            <activation>
                <property>
                    <name>env.TRAVIS</name>
                    <value>true</value>
                </property>
            </activation>
            
            <build>

                <plugins>
                    
                    <!-- Run the default Jdeps verification on this project but fail if a warning is generated.
                    -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jdeps-plugin</artifactId>
                        <configuration>
                            <failOnWarning>true</failOnWarning>
                        </configuration>
                    </plugin>
            
                    <!-- Verify the project dependencies do not have any CVE entries using the inherited configuration.
                    -->
                    <plugin>
                        <groupId>com.h3xstream.maven</groupId>
                        <artifactId>security-versions</artifactId>
                        <executions>
                            <execution>
                                <id>check-cve-issues</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>

        <!-- Adds "pre-format", "format", "post-format" phases to the build lifecycle. This phase is intended to allow
             the usage of plugins for formatting code and other project contents. Like all standard lifecycle phases,
             running "mvn format" from the command line will execute all plugins bound to the "format" phase.
             By default there are no plugins or other executions bound to this phase.
        -->
        <extensions>
            <extension>
                <groupId>com.xiantrimble.maven</groupId>
                <artifactId>maven-format-lifecycle</artifactId>
                <version>1.0.0</version>
            </extension>
        </extensions>

        <!--
            The resources defined here are included within the "build-resources" JAR used to provide children of this
            POM with access to our build resource files.
        -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/org/github/emabrey/emabrey_parent/build_resources/EPL.txt</include>
                    <include>**/org/github/emabrey/emabrey_parent/build_resources/MIT.txt</include>
                    <include>**/org/github/emabrey/emabrey_parent/build_resources/javadoc.css</include>
                </includes>
            </resource>
        </resources>

        <pluginManagement>
            <plugins>

                <!-- Verifies the project complies with various rules, including enforcing Java and Maven runtime
                     versions while also preventing duplicate classes, circular dependencies and incompatiable Java
                     class bytecode versions.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>1.4.1</version>
                    <configuration>
                        <rules>
                            <requireMavenVersion>
                                <version>[${versions.maven.minimum},)</version>
                            </requireMavenVersion>
                            <requireJavaVersion>
                                <version>[${versions.buildJDK.minimum}.0,)</version>
                            </requireJavaVersion>
                            <enforceBytecodeVersion>
                                <maxJdkVersion>${versions.buildJDK.minimum}</maxJdkVersion>
                            </enforceBytecodeVersion>
                            <banCircularDependencies/>
                            <banDuplicateClasses>
                                <findAllDuplicates>true</findAllDuplicates>
                            </banDuplicateClasses>
                        </rules>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>extra-enforcer-rules</artifactId>
                            <version>1.0-beta-6</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <!-- Verifies that certain files contain the correct project-wide licensing header. By default the EPL
                     license is used, though alternative licenses can be utilized by including the license templates
                     provided via the plugin's default resources. The plugin executes during the format phase.

                     See http://code.mycila.com/license-maven-plugin/#license-templates for usage details.
                -->
                <plugin>
                    <groupId>com.mycila</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>3.0</version>
                    <executions>
                        <execution>
                            <id>format-license-headers</id>
                            <phase>format</phase>
                            <goals>
                                <goal>format</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <header>org/github/emabrey/emabrey_parent/build_resources/MIT.txt</header>
                        <useDefaultExcludes>true</useDefaultExcludes>
                    </configuration>
                </plugin>

                <!-- Identifies vulnerable dependencies with known and publicly reported security issues by searching
                     the CVE database provided via the victims-cve-db project. If a dependency within the project is
                     vulnerable to any known vulnerabilities then a build halting error is generated.
                -->
                <plugin>
                    <groupId>com.h3xstream.maven</groupId>
                    <artifactId>security-versions</artifactId>
                    <version>1.0.2</version>
                </plugin>

                <!-- Verifies that the project classes contain no use of vendor specific classes. Examples of forbidden
                     classes are the "com.sun" package classes. Should a vendor or JVM implementation specific class
                     usage be found the build will generate a warning, but will not fail. Main classes and test classes
                     are both verified.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jdeps-plugin</artifactId>
                    <version>3.0.0</version>
                    <executions>
                        <execution>
                            <id>process-main-deps</id>
                            <phase>process-classes</phase>
                            <goals>
                                <goal>jdkinternals</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>process-test-deps</id>
                            <phase>process-test-classes</phase>
                            <goals>
                                <goal>test-jdkinternals</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <failOnWarning>false</failOnWarning>
                    </configuration>
                </plugin>

                <!-- Configure compilation to default to using the JAVAC compiler to generate optimized Java classes.
                     Compilation and deprecation warnings are enabled, though in the event of a compilation error the
                     build will immediately terminate and output an error message.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.6.0</version>
                    <configuration>
                        <compilerId>javac-with-errorprone</compilerId>
                        <forceJavacCompilerUse>true</forceJavacCompilerUse>
                        <showDeprecation>true</showDeprecation>
                        <showWarnings>true</showWarnings>
                        <optimize>true</optimize>
                        <source>${versions.buildJDK.minimum}</source>
                        <target>${versions.buildJDK.minimum}</target>
                        <failOnError>true</failOnError>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.codehaus.plexus</groupId>
                            <artifactId>plexus-compiler-javac-errorprone</artifactId>
                            <version>2.8.1</version>
                        </dependency>
                        <!-- Custom dependency to force using the current version of errorprone -->
                        <dependency>
                            <groupId>com.google.errorprone</groupId>
                            <artifactId>error_prone_core</artifactId>
                            <version>2.0.14</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <!-- Configures the resources which this project should copy by default.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.1</version>
                    <executions>
                        <execution>
                            <id>copy_to_project-build-outputDirectory</id>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>${project.basedir}</directory>
                                        <includes>
                                            <include>license.txt</include>
                                            <include>README.md</include>
                                        </includes>
                                        <filtering>false</filtering>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                
                <!--
                    Generates JAR files with the plugin's default configuration.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>

                <!-- Obfuscates and optimizes the generated JAR file and replaces the original JAR artifact with
                     the newly obfuscated and optimized JAR. This is a default configuration which is appropriate
                     for almost all basic children project's, however, it may be necessary to add project specific
                     configuration related to keeping resource file names/locations and preventing the altering of
                     API interfaces. For convenience preconfigured lists of attributes have been created and added
                     to the properties of this POM for the use by children projects.
                -->
                <plugin>
                    <groupId>com.github.wvengen</groupId>
                    <artifactId>proguard-maven-plugin</artifactId>
                    <version>2.0.13</version>
                    <configuration>
                        <obfuscate>true</obfuscate>
                        <attach>true</attach>
                        <attachMap>true</attachMap>
                        <appendClassifier>false</appendClassifier>
                        <addMavenDescriptor>false</addMavenDescriptor>

                        <injar>${project.build.finalName}.jar</injar>
                        <outjar>${project.build.finalName}.jar</outjar>
                        <injarNotExistsSkip>true</injarNotExistsSkip>

                        <proguardVersion>${versions.proguard.required}</proguardVersion>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>net.sf.proguard</groupId>
                            <artifactId>proguard-base</artifactId>
                            <version>${versions.proguard.required}</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <!-- Generates JavaDoc documentation with support for including formatted code snippets in the final
                     JavaDoc which are pulled directly from source during compilation. For instructions on code snippet
                     creation and the Doclet's "@codesnippet" tag see https://github.com/jtulach/codesnippet4javadoc
                     for documentation. JavaDocs are generated for both main and test classes, and both main and test
                     JavaDocs are attached as JAR artifacts during packaging.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.10.4</version>
                    <executions>
                        <execution>
                            <id>generate-main-javadocs</id>
                            <phase>package</phase>
                            <goals>
                                <goal>javadoc-no-fork</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.reports.directory}/javadoc/main</outputDirectory>
                            </configuration>
                        </execution>
                        <execution>
                            <id>attach-main-javadocs</id>
                            <phase>install</phase>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.reports.directory}/javadoc/main</outputDirectory>
                            </configuration>
                        </execution>
                        <execution>
                            <id>generate-test-javadocs</id>
                            <phase>package</phase>
                            <goals>
                                <goal>test-javadoc-no-fork</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.reports.directory}/javadoc/test</outputDirectory>
                            </configuration>
                        </execution>
                        <execution>
                            <id>attach-test-javadocs</id>
                            <phase>install</phase>
                            <goals>
                                <goal>test-jar</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.reports.directory}/javadoc/test</outputDirectory>
                            </configuration>
                        </execution>
                    </executions>
                    <configuration>
                        <additionalparam>-snippetpath "${project.build.testSourceDirectory}"</additionalparam>
                        <additionalparam>-maxLineLength ${lineLength}</additionalparam>
                        <bottom>${project.reports.copyrightFooter}</bottom>
                        <breakiterator>true</breakiterator>
                        <detectLinks>true</detectLinks>
                        <docfilessubdirs>true</docfilessubdirs>
                        <doclet>org.apidesign.javadoc.codesnippet.Doclet</doclet>
                        <docletArtifact>
                            <groupId>org.apidesign.javadoc</groupId>
                            <artifactId>codesnippet-doclet</artifactId>
                            <version>0.10</version>
                        </docletArtifact>
                        <linksource>true</linksource>
                        <outputDirectory>${project.reports.directory}/javadoc/other</outputDirectory>
                        <serialwarn>true</serialwarn>
                        <sourcetab>${indentSize}</sourcetab>
                        <stylesheet>maven</stylesheet>
                        <stylesheetfile>org/github/emabrey/emabrey_parent/build_resources/javadoc.css</stylesheetfile>
                        <useStandardDocletOptions>true</useStandardDocletOptions>
                        <validateLinks>true</validateLinks>
                    </configuration>
                </plugin>

                <!-- Configures the arguments passed to the JVM used for execution of unit tests for compatability with
                     the JaCoCo Java agent injected by the JaCoCo plugin. Additionally, the unit tests will generate
                     their results, including a summary of all the tests, in the specified report directory.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.19.1</version>
                    <configuration>
                        <argLine>@{argLine} -server</argLine>
                        <printSummary>true</printSummary>
                        <reportsDirectory>${project.reports.directory}/unit-tests/results</reportsDirectory>
                    </configuration>
                </plugin>
                
                <!-- Before executing the unit tests, attach a Java Agent to the JVM to record and monitor the execution
                     of the unit tests. After all unit tests have completed, generate a report which contains the
                     analyzed results and metrics generated from the information gathered by the Java Agent.
                -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>0.7.7.201606060606</version>
                    <executions>
                        <execution>
                            <id>add-test-javaagent</id>
                            <phase>initialize</phase>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>report-test-modules</id>
                            <phase>test</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <outputDirectory>${project.reports.directory}/unit-tests/coverage</outputDirectory>
                    </configuration>
                </plugin>

                <!--Generate artifact and attach source JARs for the project. These source JARs are required for proper
                    source code resolution for project's using the project's main artifact as a dependency.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.0.1</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <phase>install</phase>
                            <goals>
                                <goal>jar-no-fork</goal>
                                <goal>test-jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- Configures the runtime options of the GPG executable while additionally also modifying the
                     invocation of GPG to default to using the main key used by Emily Mabrey to sign files for public
                     distribution.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>1.6</version>
                    <executions>
                        <execution>
                            <id>sign-artifacts</id>
                            <phase>install</phase>
                            <goals>
                                <goal>sign</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <useAgent>true</useAgent>
                        <keyname>6F4EF47256A1B7DC</keyname>
                        <gpgArguments>
                            <arg>--no-comments</arg>
                            <arg>--no-version</arg>
                            <arg>--no-textmode</arg>
                            <arg>--force-mdc</arg>
                        </gpgArguments>
                    </configuration>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>

            <!-- Enforce the inherited enforcement rules.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-default-rules</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Run the inherited license formating execution using the MIT license instead of the default EPL license.
            -->
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <configuration>
                    <header>org/github/emabrey/emabrey_parent/build_resources/EPL.txt</header>
                </configuration>
            </plugin>

            <!-- Copy both the inherited resources and also the project specific resources from the src directory.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>process_to_project-build-outputDirectory</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Generate the output files for the project using the inherited configuration.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution>
                        <id>compileMainJavaClass</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Generate the build-resources JAR which contains the resources needed by certain plugins so that
                 inheriting children have access to the files without any complicated setup required within the child
                 POM. See the "add-external-build-resources-artifact" profile for the other important part of allowing
                 children POMs access to these files.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-build-resources-jar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <classifier>build-resources</classifier>
                </configuration>
            </plugin>

            <!-- Shrinks the build-resources JAR using a customized version of the default Proguard configuration.
            -->
            <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>obfuscate-build-resources-jar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>proguard</goal>
                        </goals>
                        <configuration>
                            <injar>${project.artifactId}-${project.version}-build-resources.jar</injar>
                            <libs>
                                <lib>${java.home}/lib/rt.jar</lib>
                            </libs>
                            <obfuscate>false</obfuscate>
                            <options>
                                <option>-keep public class * {
                                    public protected *;
                                    }
                                </option>
                                <option>-keepclassmembernames class * {
                                    java.lang.Class class$(java.lang.String);
                                    java.lang.Class class$(java.lang.String, boolean);
                                    }
                                </option>
                                <option>-keepclasseswithmembernames,includedescriptorclasses class * {
                                    native <![CDATA[<methods>]]>;
                                    }
                                </option>
                                <option>-keepclassmembers,allowoptimization enum * {
                                    public static **[] values();
                                    public static ** valueOf(java.lang.String);
                                    }
                                </option>
                                <option>-keepclassmembers class * implements java.io.Serializable {
                                    static final long serialVersionUID;
                                    private static final java.io.ObjectStreamField[] serialPersistentFields;
                                    private void writeObject(java.io.ObjectOutputStream);
                                    private void readObject(java.io.ObjectInputStream);
                                    java.lang.Object writeReplace();
                                    java.lang.Object readResolve();
                                    }
                                </option>
                                <option>-target ${versions.buildJDK.minimum}</option>
                                <option>-optimizationpasses 3</option>
                                <option>-useuniqueclassmembernames</option>
                                <option>-dontskipnonpubliclibraryclassmembers</option>
                                <option>-keepdirectories org/github/emabrey/emabrey_parent/build_resources/</option>
                                <option>-keepattributes ${proguard.attributes.standard}</option>
                                <option>-keepparameternames</option>
                                <option>-renamesourcefileattribute SourceFile</option>
                            </options>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>
</project>
